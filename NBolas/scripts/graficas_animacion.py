import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import os

from matplotlib.offsetbox import OffsetImage, AnnotationBbox
import matplotlib.image as mpimg


# Ruta del archivo .dat
datafile = "results/salida.dat"

# Leer datos
data = np.loadtxt(datafile)
t = data[:, 0]
rest = data[:, 1:]
N = rest.shape[1] // 4
print(f"Cargando datos: {N} part√≠culas, {len(t)} pasos.")

# Crear carpeta results si no existe
os.makedirs("results", exist_ok=True)

# ----------------------------------------------------------
# 1Ô∏è‚É£ Graficar trayectorias
# ----------------------------------------------------------
plt.figure(figsize=(6,6))
for i in range(min(10, N)):
    x = rest[:, 4*i]
    y = rest[:, 4*i + 1]
    plt.plot(x, y, linewidth=0.8, label=f'Bola {i}')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Trayectorias de part√≠culas')
plt.axis('equal')
plt.legend(fontsize='x-small', ncol=2)
plt.grid(True)
plt.tight_layout()
plt.savefig("results/trayectorias.png", dpi=150)
plt.close()

# ----------------------------------------------------------
# ----------------------------------------------------------
# 2Ô∏è‚É£ Histograma de velocidades finales (con Maxwell‚ÄìBoltzmann)
# ----------------------------------------------------------
vels = np.zeros((len(t), N))
for i in range(N):
    vx = rest[:, 4*i + 2]
    vy = rest[:, 4*i + 3]
    vels[:, i] = np.sqrt(vx**2 + vy**2)

v_final = vels[-1, :]  # velocidades del √∫ltimo paso

# --- Histograma normalizado ---
plt.figure(figsize=(7,5))
counts, bins, _ = plt.hist(v_final, bins=20, density=True,
                           color='lightblue', edgecolor='black', alpha=0.6, label='Simulaci√≥n')

# --- Calcular curva de Maxwell‚ÄìBoltzmann (ajustada al promedio) ---
v = np.linspace(0, np.max(v_final)*1.2, 200)
v_mean = np.mean(v_final)
a = v_mean / np.sqrt(np.pi / 2)   # relaci√≥n emp√≠rica entre <v> y par√°metro
f_MB = (v / a**2) * np.exp(-v**2 / (2*a**2))   # forma en 2D (normalizada)

plt.plot(v, f_MB, 'r-', lw=2, label='Distribuci√≥n Maxwell‚ÄìBoltzmann (ajustada)')

plt.xlabel('|v|')
plt.ylabel('Probabilidad')
plt.title('Distribuci√≥n de velocidades y comparaci√≥n con Maxwell‚ÄìBoltzmann')
plt.legend()
plt.grid(True, linestyle='--', alpha=0.6)
plt.tight_layout()
plt.savefig("results/histograma_velocidades.png", dpi=150)
plt.close()


# 3Ô∏è‚É£ Gr√°fica de posici√≥n X vs Tiempo
# ----------------------------------------------------------
plt.figure(figsize=(7, 5))
for i in range(min(5, N)):  # mostramos las primeras 5 pok√©bolas
    x = rest[:, 4*i]
    plt.plot(t, x, label=f'Pok√©bola {i+1}')
plt.xlabel('Tiempo (s)')
plt.ylabel('Posici√≥n en x')
plt.title('Posici√≥n en x vs Tiempo')
plt.legend(fontsize='small', ncol=2)
plt.grid(True, linestyle='--', alpha=0.6)
plt.tight_layout()
plt.savefig("results/x_vs_t.png", dpi=150)
plt.close()

# ----------------------------------------------------------
# ----------------------------------------------------------
# # 5Ô∏è‚É£ Presi√≥n te√≥rica vs experimental
data_pres = np.loadtxt("results/presion.dat")
t_pres = data_pres[:,0]
P_exp = data_pres[:,1]
P_teo = data_pres[:,2]

plt.figure(figsize=(7,5))
plt.plot(t_pres, P_exp, 'b-', label='Presi√≥n experimental (choques)')
plt.plot(t_pres, P_teo, 'r--', label='Presi√≥n te√≥rica (‚àù nm‚ü®v¬≤‚ü©/L¬≤)')
plt.xlabel('Tiempo')
plt.ylabel('Presi√≥n (unidades arbitrarias)')
plt.title('Comparaci√≥n de presi√≥n experimental y te√≥rica')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.savefig("results/presion_vs_t.png", dpi=150)
plt.close()

# ----------------------------------------------------------
# 3Ô∏è‚É£ Animaci√≥n (matplotlib.animation)
# ----------------------------------------------------------
fig, ax = plt.subplots(figsize=(6,6))
ax.set_xlim(0, 1)
ax.set_ylim(0, 1)
ax.set_title("Animaci√≥n del sistema de part√≠culas")
ax.set_xlabel("x")
ax.set_ylabel("y")
ax.set_facecolor("black")  # fondo oscuro opcional üí´

# üîπ Cargar imagen de Pok√©bola (aseg√∫rate de tener scripts/pokeball.png)
sprite = mpimg.imread("scripts/pokemini.png")

def init():
    return []

def update(frame):
    ax.clear()
    ax.set_xlim(0, 1)
    ax.set_ylim(0, 1)
    ax.set_title("Simulaci√≥n de Pok√©bolas rebotando")
    ax.set_facecolor("black")

    # Coordenadas de cada part√≠cula
    x = rest[frame, 0::4]
    y = rest[frame, 1::4]

    # Dibujar cada part√≠cula como Pok√©bola
    for i in range(N):
        imagebox = OffsetImage(sprite, zoom=0.5)
        ab = AnnotationBbox(imagebox, (x[i], y[i]), frameon=False)
        ax.add_artist(ab)

    # üîπ Mostrar el tiempo actual (en segundos)
    tiempo_actual = t[frame]
    ax.text(
        0.05, 0.95,
        f"t = {tiempo_actual:.2f} s",
        transform=ax.transAxes,
        fontsize=10,
        color='white',
        verticalalignment='top',
        bbox=dict(facecolor='black', alpha=0.5, boxstyle='round')
    )

    return []

# üîπ Submuestreo para que vaya m√°s r√°pido
skip = 30   # toma 1 de cada 10 cuadros
frames = range(0, len(t), skip)

ani = animation.FuncAnimation(
    fig, update, frames=frames,
    init_func=init, blit=False, interval=30, repeat=False
)

# Guardar animaci√≥n como GIF
output_anim = "results/animacion.gif"
print(f"Guardando animaci√≥n en {output_anim} (puede tardar unos segundos)...")
ani.save(output_anim, writer="pillow", fps=30)

print("\n Gr√°ficas y animaci√≥n guardadas en carpeta results/")





















